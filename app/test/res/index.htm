
<?c
	out += parser::EncodeJsonStr< str::t_char8, str::t_string8 >( "JSON Encode String \x05" ).c_str();
?>

<br>

<?c
	out += parser::DecodeJsonStr< str::t_char8, str::t_string8 >( "JSON Decode String \\u0041" ).c_str();
?>

<br>

<?c
	t_pb8 pb;
	pb[ "A" ][ "AA" ] = "Hello World!";
	pb[ "A" ][ "AB" ] = (long)444;
	pb[ "A" ][ "AC" ] = (long)999;
	pb[ "B" ][ "BA" ] = (double)3.14159;

	out += parser::EncodeJson< str::t_char8, str::t_string8, t_pb8 >( pb ).c_str();
?>

<br>

<?c
	pb.is_list( true );
	pb[ "A" ].is_list( true );
	out += parser::EncodeJson< str::t_char8, str::t_string8, t_pb8 >( pb ).c_str();

?>

<br>

<?c
	str::t_string8 s = parser::EncodeJson< str::t_char8, str::t_string8, t_pb8 >( pb );
	t_pb8 pb2 = parser::DecodeJson< str::t_char8, str::t_string8, t_pb8 >( s );
	out += parser::EncodeJson< str::t_char8, str::t_string8, t_pb8 >( pb2 ).c_str();

?>

<?c
	for( int i = 0; i < 3; i++ )
	{
?>
		<p>
			Hello World!
		</p>
<?c
	}
?>

<br>
<?c
	const char *ps[] = { "hello world", "hola world" };
	out += str::ToString< str::t_char8, str::t_string8 >
				( str::levstr< str::t_char8, str::t_string8 >( ps[ 0 ], ps[ 1 ] ) )
			+ " : " + ps[ 0 ] + " -> " + ps[ 1 ];
?>

<br>
<pre>

<?c
	t_pb di;
	disk::GetDisksInfo( di, true );
	out += parser::EncodeJson< str::t_char, str::t_string, t_pb >( di ).c_str();
	
//	disk::GetDiskInfo( di, "/media/System" );
//	stdForeach( t_pb::iterator, it, di )
//		out += str::t_string() + it->first + " : "
//				+ it->second->ToString()
//				+ "<br>\r\n";

?>
</pre>

<!--<img src="mars.jpg">-->

