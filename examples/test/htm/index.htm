<pre>
<?c

	out << parser::EncodeJsonStr< str::t_string >( "JSON Encode String \x05" ) + "\n";
	out << parser::DecodeJsonStr< str::t_string >( "JSON Decode String \\u0041" ) + "\n";

	out << "The number six : " << str::ToString( 6 ) << "\n";
	
	tq::set( "a", "12345" );
	out << "a = " << tq::get( "a" ) << "\n";

?><?global

	long mythread( CThread*, void* )
	{
		tq::set( "b", "98765" );
		return -1;
	}

?><?c

	int ret = tq::start( "", mythread );
	out << "tq::start() returned " << ret << "\n";
	if ( 0 <= ret ) 
		tq::wait( "b", 1000 );
	out << "b = " << tq::get( "b" ) << "\n";

	out << " --- INPUT ---\n" << parser::EncodeJson( in ) << "\n\n";
	
	t_pb8 pb;
	pb[ "A" ][ "AA" ] = "Hello World!";
	pb[ "A" ][ "AB" ] = (long)444;
	pb[ "A" ][ "AC" ] = (long)999;
	pb[ "B" ][ "BA" ] = (double)3.14159;

	out << "A.AA = " << pb.at( "A.AA", "." ) << "\n";

	out << parser::EncodeJson( pb ) + "\n";

	pb.is_list( true );
	pb[ "A" ].is_list( true );
	out << parser::EncodeJson( pb ) + "\n";

	str::t_string8 s = parser::EncodeJson( pb );
	t_pb8 pb2 = parser::DecodeJson< t_pb8 >( s );
	out << parser::EncodeJson( pb2 ) + "\n";

	t_pb8 pb3;
	pb3[ "a" ] = "A";
	pb3[ "b" ] = "B";
	pb3[ "=& c++" ] = "=== This & That ===";

	str::t_string8 urlenc = parser::EncodeUrl( pb3 );
	out << urlenc + "\n"
		<< parser::EncodeJson( parser::DecodeUrl< t_pb8 >( urlenc ) ) + "\n";

	const char *uri[] = 
	{	
		"http://user:pass@example:1234/path/file?a=b&c=d#here",
		"http://example:1234/path/file?a=b&c=d#here",
		"http://example:1234/path/file?a=b&c=d",
		"http://example:1234/path/file",
		"http://example:1234/",
		"http://example:1234",
		"http://example/",
		"http://example",
		0
	};

	for( int i = 0; uri[ i ]; i++ )
	{	pb = parser::DecodeUri< t_pb >( uri[ i ] );
		out << "\n" << uri[ i ] << "\n" << parser::EncodeUri( pb ) << "\n" << parser::EncodeJson( pb ) << "\n";
	} // end for

	if ( !CIpSocket::InitSockets() )
		out << "CIpSocket::InitSockets() Failed\n";
	else
	{
		CIpSocket is;

		if ( !is.Connect( "google.com", 80 ) )
			out << "CIpSocket::Connect() failed : " << is.GetLastErrorMsg();

		else if ( !is.WaitEvent( CIpSocket::eConnectEvent ) )
			out << "CIpSocket::WaitEvent( CIpSocket::eConnectEvent ) failed : " << is.GetLastErrorMsg();

		else
		{
			out << "Local  : " << is.LocalAddress().GetDotAddress() << "\n";
			out << "Remote : " << is.PeerAddress().GetDotAddress() << "\n";
				
			if ( !is.Send( "GET / HTTP/1.0\r\n\r\n" ) )
				out << "CIpSocket::Send() : " << is.GetLastErrorMsg();

			// Wait for data
			if ( !is.WaitEvent( CIpSocket::eReadEvent ) )
				out << "CIpSocket::WaitEvent( CIpSocket::eReadEvent ) : " << is.GetLastErrorMsg();

			else
			{
			
				out << is.Recv( 64 );

//				CIpSocket::t_string data;
//				do { out << ( data = is.Recv() );
//				} while ( data.length() && is.WaitEvent( CIpSocket::eReadEvent, 1000 ) );

			} // end while

		} // end else

		CIpSocket::UninitSockets();

	} // end else

	for( int i = 0; i < 3; i++ )
	{
?>
		<b>Hello World!</b><br>
<?c
	}

	const char *ps[] = { "hello world", "hola world" };
	out << str::ToString<str::t_string8 >
				( str::levstr< str::t_string8 >( ps[ 0 ], ps[ 1 ] ) )
			+ " : " + ps[ 0 ] + " -> " + ps[ 1 ];
?>
</pre>

